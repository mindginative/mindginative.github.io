<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Windows10 on Richard Sentino via mindginative</title>
    <link>http://www.mindginative.com/tags/windows10/index.xml</link>
    <description>Recent content in Windows10 on Richard Sentino via mindginative</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://www.mindginative.com/tags/windows10/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>NodeJS Development Inside Docker on Windows 10</title>
      <link>http://www.mindginative.com/post/nodejs-development-inside-docker-with-windows10/</link>
      <pubDate>Wed, 15 Feb 2017 16:39:23 +1300</pubDate>
      
      <guid>http://www.mindginative.com/post/nodejs-development-inside-docker-with-windows10/</guid>
      <description>

&lt;h2 id=&#34;wait-what&#34;&gt;Wait, what ?&lt;/h2&gt;

&lt;p&gt;Moving to Windows10 (6 months ago as of this writing) as my main OS is a bit hard, just a little bit.
I use commandline &lt;strong&gt;ALL THE TIME&lt;/strong&gt; and I can&amp;rsquo;t live without the developer&amp;rsquo;s Swiss army knife on my side - tiny tools that make our life easier: &lt;em&gt;grep&lt;/em&gt;, &lt;em&gt;sed&lt;/em&gt;, &lt;em&gt;ps&lt;/em&gt;, &lt;em&gt;tree&lt;/em&gt;, &lt;em&gt;ssh&lt;/em&gt;, &lt;em&gt;find&lt;/em&gt; &amp;hellip;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;&lt;em&gt;&lt;a href=&#34;https://msdn.microsoft.com/en-us/commandline/wsl/about&#34;&gt;Bash On Windows&lt;/a&gt;&lt;/em&gt;&amp;rdquo; was a good strategy from Microsoft - I didn&amp;rsquo;t bother about switching to Windows and I didn&amp;rsquo;t think twice, I was more worried about which machine to buy.&lt;/p&gt;

&lt;p&gt;I miss some of the good stuff from MacOS: &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;, &lt;a href=&#34;https://caskroom.github.io/&#34;&gt;Homebrew Cask&lt;/a&gt;, to name a few.
I&amp;rsquo;ll just get a Mac mini for OSX development.&lt;/p&gt;

&lt;h2 id=&#34;frustration-solution&#34;&gt;Frustration &amp;amp; Solution&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m a member of the &lt;a href=&#34;https://blogs.windows.com/blog/tag/windows-insider-program/&#34;&gt;Windows Insider Program&lt;/a&gt; and their build releases includes fixes to some annoying issues, often with accompanying features.
However, the build release &lt;a href=&#34;https://blogs.windows.com/windowsexperience/2017/02/08/announcing-windows-10-insider-preview-build-15031-pc/&#34;&gt;15031&lt;/a&gt; affected my productivity.
Bash On Windows would hang up and opening up a separate Bash window gives the same result - you can&amp;rsquo;t even close the window nor the running process - this would have been an easy &lt;code&gt;kill -9 &amp;lt;PID&amp;gt;&lt;/code&gt; command in Mac/Linux, the famous ALT + CTRL + DELETE combination is nowhere effective.
NodeJS via NVM wouldn&amp;rsquo;t work at all, see issue &lt;a href=&#34;https://github.com/Microsoft/BashOnWindows/issues/1683&#34;&gt;#1683&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Reboot! yep sometimes 6 reboots in a day&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A rollback to the previous build release was the easiest solution. I hit the button and it works, as &lt;a href=&#34;https://github.com/Microsoft/BashOnWindows/issues/1683#issuecomment-279109940&#34;&gt;Ben Hillis&lt;/a&gt; said of Bash On Windows team:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The rollback feature really is great and doesn&amp;rsquo;t get enough credit. It&amp;rsquo;s saved me a couple times as well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The hang up went out however there are still minor issues like slowness, etc. It&amp;rsquo;s bearable but I&amp;rsquo;ve already thought of finding an alternative,
one where I could easily jump from different machine and OS eg. MacOS, Linux.&lt;/p&gt;

&lt;h2 id=&#34;docker-docker&#34;&gt;Docker, Docker&lt;/h2&gt;

&lt;p&gt;Enter Docker, I haven&amp;rsquo;t fully utilised this tool since its beta phase. 5 or 6 montsh ago there were issues with mounting folders from host machine inside a container, it was a show stopper for me at that time.
I was following some steps from John Lees-Miller&amp;rsquo;s &amp;ldquo;&lt;a href=&#34;http://jdlm.info/articles/2016/03/06/lessons-building-node-app-docker.html&#34;&gt;Building a Node App in Docker&lt;/a&gt;&amp;rdquo; and everthing works except for mounting a shared folder.&lt;/p&gt;

&lt;p&gt;February 2017, I revisited steps and it works!&lt;/p&gt;

&lt;h3 id=&#34;docker-with-node-version-manager&#34;&gt;Docker with Node Version Manager&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s the slightly modified Docker configuration.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OS: Ubuntu 16.04&lt;/li&gt;
&lt;li&gt;NodeJS: v6.9.2 via NVM&lt;/li&gt;
&lt;li&gt;NVM: v0.33.0&lt;/li&gt;
&lt;li&gt;Docker: 1.13.1 (10072)&lt;/li&gt;
&lt;li&gt;Docker Channel: Stable 94675c5&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dockerfile&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM ubuntu:16.04

# Constants
ENV NVM_VERSION v0.33.0
ENV NODE_VERSION v6.9.2
ENV HOME=/home/app

# Replace shell with bash so we can source files
RUN rm /bin/sh &amp;amp;&amp;amp; ln -s /bin/bash /bin/sh

# add special user called `app`
RUN useradd --user-group --create-home --shell /bin/false app

# Install pre-reqs
RUN apt-get update &amp;amp;&amp;amp; apt-get install -y \
    build-essential \
    checkinstall    \
    libssl-dev      \
    curl

USER app

# Install NVM
RUN curl -o- https://raw.githubusercontent.com/creationix/nvm/${NVM_VERSION}/install.sh | bash

# Install NODE
RUN source ~/.nvm/nvm.sh; \
    nvm install $NODE_VERSION; \
    nvm use --delete-prefix $NODE_VERSION;

USER root
COPY package.json start.sh $HOME/web/
RUN chown -R app:app $HOME/*

USER app
WORKDIR $HOME/web
RUN source ~/.nvm/nvm.sh; \
    nvm use --delete-prefix $NODE_VERSION; \
    npm install;

USER root
COPY . $HOME/web
RUN chown -R app:app $HOME/*

USER app
RUN source ~/.nvm/nvm.sh; \
    nvm use --delete-prefix $NODE_VERSION;

CMD [&amp;quot;./start.sh&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;docker-compose.yml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;web:
  build: .
  ports:
    - &#39;8080:8080&#39;
  environment:
    NODE_ENV: dev
  volumes:
    - .:/home/app/web
    - /home/app/web/node_modules
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;start.sh&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

# load NVM environment
source ~/.nvm/nvm.sh
nvm use --delete-prefix v6.9.2

# start server
npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enjoy&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Install FFmpeg from source on Ubuntu Bash on Win10</title>
      <link>http://www.mindginative.com/post/install-ffmpeg-from-source-ubuntu-win10/</link>
      <pubDate>Mon, 28 Nov 2016 01:17:35 +1300</pubDate>
      
      <guid>http://www.mindginative.com/post/install-ffmpeg-from-source-ubuntu-win10/</guid>
      <description>&lt;p&gt;I was working on transcoding videos into different formats, resolutions so it could be played on various desktops, tablets and mobile devices.
My main working machine is Dell XPS13 on Windows 10 with Ubuntu Bash enabled, some of my needed libraries is missing and needs recompilation of FFmpeg the one
that came from Ubuntu 14.04 repo.&lt;/p&gt;

&lt;p&gt;I think I&amp;rsquo;ve literraly spent hours or probably days buildin/re-building libraries just to get the videos transcoded into my desired format.&lt;/p&gt;

&lt;p&gt;I got tired of copy/pasting the script from the &lt;a href=&#34;https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu&#34;&gt;wiki&lt;/a&gt;. I also needed a script where I could drop into my build server.
There are couple of examples online, I&amp;rsquo;ve tried some of those, and some are a bit outdated now.&lt;/p&gt;

&lt;p&gt;I ripped off the FFmpeg compilation steps and dropped into a simple bash script. All I needed to do now is just:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo installer.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo uninstaler.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;grab the script here: &lt;a href=&#34;https://github.com/rixrix/ffmpeg_ubuntu_installer.sh&#34;&gt;https://github.com/rixrix/ffmpeg_ubuntu_installer.sh&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go1.7 installation via GVM on Ubuntu Bash on Windows 10</title>
      <link>http://www.mindginative.com/post/go1-7-bash-on-win10/</link>
      <pubDate>Sat, 26 Nov 2016 22:27:10 +1300</pubDate>
      
      <guid>http://www.mindginative.com/post/go1-7-bash-on-win10/</guid>
      <description>

&lt;p&gt;Since moving to &lt;a href=&#34;https://www.gohugo.io/&#34;&gt;Hugo&lt;/a&gt; few months ago my installation
history with &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; was quick and dirty, I just want to get something
up running to get started with Hugo. 48 hours ago I was playing with Go,
I thought of building a simple cli utility where CI server can hook in and start building something
- of course it has be built on top of Go, enough to get my around its dev-ecosystem.&lt;/p&gt;

&lt;p&gt;Bash on Windows 10 shipped with Ubuntu 14.04.5 but unfortunately the repo contains Go1.6.
I could use the Personal Package Archive (ppa) repo however coming from Node Version Manager (nvm),
I find it a lot easier to switchover from one version to another -
I have NodeJS projects which requires specific version to run eg: 0.x, 4.x and 6.x and so a version manager is a big help.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;installation&#34;&gt;Installation&lt;/h4&gt;

&lt;p&gt;it&amp;rsquo;s pretty straight forward, see gvm steps at &lt;a href=&#34;https://github.com/moovweb/gvm#installing&#34;&gt;https://github.com/moovweb/gvm#installing&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;notes&#34;&gt;Notes&lt;/h4&gt;

&lt;p&gt;These are just a few details that I&amp;rsquo;ve encountered during gvm installation, it might be of your help.&lt;/p&gt;

&lt;h4 id=&#34;failed-to-install-go1-7&#34;&gt;Failed to install Go1.7&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$&amp;gt; gvm install go1.7

Downloading Go source...
Installing go1.7...
 * Compiling...
ERROR: Failed to compile. Check the logs at /home/urix/.gvm/logs/go-go1.7-compile.log
ERROR: Failed to use installed version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure to set to issue this command before you install v1.7&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gvm install go1.4 -B
gvm use go1.4
export GOROOT_BOOTSTRAP=$GOROOT
gvm install go1.7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Set the default Go1.7 version to get the same version when you close and open the Bash shell&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gvm use go1.7 --default
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;goroot-and-gopath&#34;&gt;GOROOT and GOPATH&lt;/h4&gt;

&lt;p&gt;These environment variables will be set automatically by gvm for you when you switch versions,
which is handy when testing packages with different versions of Go.&lt;/p&gt;

&lt;p&gt;My environment for Go1.7&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$&amp;gt; go version
go version go1.7 linux/amd64

$&amp;gt; go env

GOARCH=&amp;quot;amd64&amp;quot;
GOBIN=&amp;quot;&amp;quot;
GOEXE=&amp;quot;&amp;quot;
GOHOSTARCH=&amp;quot;amd64&amp;quot;
GOHOSTOS=&amp;quot;linux&amp;quot;
GOOS=&amp;quot;linux&amp;quot;
GOPATH=&amp;quot;/home/urix/.gvm/pkgsets/go1.7/global&amp;quot;
GORACE=&amp;quot;&amp;quot;
GOROOT=&amp;quot;/home/urix/.gvm/gos/go1.7&amp;quot;
GOTOOLDIR=&amp;quot;/home/urix/.gvm/gos/go1.7/pkg/tool/linux_amd64&amp;quot;
CC=&amp;quot;gcc&amp;quot;
GOGCCFLAGS=&amp;quot;-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build356629057=/tmp/go-build -gno-record-gcc-switches&amp;quot;
CXX=&amp;quot;g++&amp;quot;
CGO_ENABLED=&amp;quot;1&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and Go1.4&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$&amp;gt; gvm use go1.4
Now using version go1.4

$&amp;gt; go version
go version go1.4 linux/amd64

$&amp;gt; go env
GOARCH=&amp;quot;amd64&amp;quot;
GOBIN=&amp;quot;&amp;quot;
GOCHAR=&amp;quot;6&amp;quot;
GOEXE=&amp;quot;&amp;quot;
GOHOSTARCH=&amp;quot;amd64&amp;quot;
GOHOSTOS=&amp;quot;linux&amp;quot;
GOOS=&amp;quot;linux&amp;quot;
GOPATH=&amp;quot;/home/urix/.gvm/pkgsets/go1.4/global&amp;quot;
GORACE=&amp;quot;&amp;quot;
GOROOT=&amp;quot;/home/urix/.gvm/gos/go1.4&amp;quot;
GOTOOLDIR=&amp;quot;/home/urix/.gvm/gos/go1.4/pkg/tool/linux_amd64&amp;quot;
CC=&amp;quot;gcc&amp;quot;
GOGCCFLAGS=&amp;quot;-fPIC -m64 -pthread -fmessage-length=0&amp;quot;
CXX=&amp;quot;g++&amp;quot;
CGO_ENABLED=&amp;quot;1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>